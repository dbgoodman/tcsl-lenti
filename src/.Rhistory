cd27_t=1800,
ccr7_t=1100,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd4_dir <- "flow/TCSL105 ALL FILES/Diff/processed"
#AWS Version:
cd4_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl105/diff"
cd4_out <- load_diff_data(cd4_dir, cd4_marker_pos_threshold, max_sample=n_events_per_well)
# CD8 ======
cd8_marker_pos_threshold <- list(
cd62l_t=1750,
cd27_t=1800,
ccr7_t=1050,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd8_dir <- "flow/2019.06.07 TCSL091 ALL FILES/Diff/processed"
#AWS Version:
cd8_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl091/diff"
cd8_out <- load_diff_data(cd8_dir, cd8_marker_pos_threshold, max_sample=n_events_per_well)
diff_dt <- rbind(cd8_out$fcs_melt_dt[, t_type := 'cd8'], cd4_out$fcs_melt_dt[, t_type := 'cd4'])
cd4_out$fcs_melt_dt <- NULL
cd8_out$fcs_melt_dt <- NULL
diff_opt_cd4 <- cd4_out
diff_opt_cd8 <- cd8_out
save('diff_opt_cd4', 'diff_opt_cd8', 'diff_dt', file=file.path(here::here('..','data','diff.Rdata')))
require(data.table)
require(scales)
require(here)
require(flowCore)
require(flowWorkspace)
parent_folder = here::here('..','..')
load_platemaps <- function(diff_dir) {
# load platemap filenames
platemap_paths <- data.table(
filepath= normalizePath(file.path(diff_dir, list.files(
diff_dir,
pattern='.*platemap.csv$',
recursive=TRUE))))
#parse day from file name
platemap_paths[, day := gsub('.*D(\\d+).*', '\\1', filepath)]
# load and merge platemaps
platemaps <- platemap_paths[, fread(file=.BY[[1]]), by=filepath]
# put 0 back into well number (ugh)
platemaps[, well := gsub(' ', '',
gsub('([A-H])(\\d{1})$', '\\1 0\\2', well))]
platemaps[car == 'KRLG1', car := 'KLRG1'][]
return(platemaps)
}
load_fcs <- function(diff_dir, channel_map) {
diff_fcs_dir <- file.path(diff_dir)
# load fcs filenames
fcs_paths <- data.table(
filepath= normalizePath(file.path(diff_fcs_dir, list.files(
diff_fcs_dir,
pattern='.*fcs',
recursive=TRUE))))
# parse well name
fcs_paths[, well := gsub('.*_([A-H]\\d+).fcs','\\1', filepath)]
fcs_paths[, plate := gsub('.*(\\d+)_[A-H]\\d+.fcs','\\1', filepath)]
fcs_paths[, day := gsub('.*_(\\d+)_\\d+_[A-H]\\d+.fcs','\\1', filepath)]
fcs_dt <- fcs_paths[,
as.data.frame(flowCore::exprs(read.FCS(filepath))),
by=c('well','plate','day')]
# give each event an ID for tracking after melt
fcs_dt[, event_id := .I, by=c('well','plate','day')]
channel_map <- list(
cd="FJComp-450_50 Violet-A",
ccr7="FJComp-780_60 YG-A",
gfp="FJComp-515_20 Blue-A",
zombie="FJComp-586_15 Violet-A",
myc="FJComp-610_20 YG-A",
cd45ra= "FJComp-660_20 Red-A",
cd62l= "FJComp-800_30 Violet-A",
cd95="FJComp-710_50 Violet-A",
cd27="FJComp-780_60 Red-A",
cd45ro="FJComp-379_28 UV-A")
# replace column names
chan_names <- data.table(merge(
names(fcs_dt),
data.table(
marker=names(channel_map),
chan=unlist(channel_map)),
by.x='x', by.y='chan',
all=T))
# fill in original column names
chan_names[is.na(marker), marker := x]
# rename columns and melt
names(fcs_dt) <- chan_names[
names(fcs_dt), marker, on='x']
# merge unmelted with plate map
fcs_dt[, day := as.numeric(day)]
fcs_dt[, plate := as.numeric(plate)]
return(list(fcs_dt= fcs_dt, channel_map= channel_map))
}
load_diff_data <- function(experiment_dir, marker_pos_threshold, max_sample=Inf) {
diff_dir <- file.path(parent_folder, experiment_dir)
platemaps <- load_platemaps(diff_dir)
fcs_out <- load_fcs(diff_dir)
fcs_dt <- fcs_out$fcs_dt
channel_map <- fcs_out$channel_map
rm(fcs_out)
fcs_dt <- merge(
fcs_dt, platemaps,
on=intersect(names(platemaps), names(fcs_dt)), all=TRUE)
# flowJo transform
for (chan_name in c(names(channel_map),
'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')) {
fcs_dt[, c(paste0(chan_name,'_t')) := flowjo_biexp()(fcs_dt[[chan_name]])]
}
melt_cols <- c(names(channel_map), 'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')
transformed_vars <- paste0(melt_cols,'_t')
melt_cols <- c(melt_cols, transformed_vars)
# downsample per well if specified
fcs_dt <- fcs_dt[, .SD[sample(.N, min(c(.N, max_sample)))], by=c('well','plate','day')]
fcs_melt_dt <- melt(
fcs_dt,
measure.vars=melt_cols)
marker_thresh_dt <- data.table(
variable= paste0(names(marker_pos_threshold)),
threshold= unlist(marker_pos_threshold))
fcs_melt_dt <- fcs_melt_dt[marker_thresh_dt, on='variable'][gt_thresh := value > threshold]
fcs_melt_dt[, threshold := NULL]
return(list(fcs_melt_dt= fcs_melt_dt, channel_map=channel_map, melt_cols=melt_cols))
}
# CD4 ======
n_events_per_well <- 10000
cd4_marker_pos_threshold <- list(
cd62l_t=1300,
cd27_t=1800,
ccr7_t=1100,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd4_dir <- "flow/TCSL105 ALL FILES/Diff/processed"
#AWS Version:
cd4_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl105/diff"
cd4_out <- load_diff_data(cd4_dir, cd4_marker_pos_threshold, max_sample=n_events_per_well)
# CD8 ======
cd8_marker_pos_threshold <- list(
cd62l_t=1750,
cd27_t=1800,
ccr7_t=1050,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd8_dir <- "flow/2019.06.07 TCSL091 ALL FILES/Diff/processed"
#AWS Version:
cd8_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl091/diff"
cd8_out <- load_diff_data(cd8_dir, cd8_marker_pos_threshold, max_sample=n_events_per_well)
diff_dt <- rbind(cd8_out$fcs_melt_dt[, t_type := 'cd8'], cd4_out$fcs_melt_dt[, t_type := 'cd4'])
cd4_out$fcs_melt_dt <- NULL
cd8_out$fcs_melt_dt <- NULL
diff_opt_cd4 <- cd4_out
diff_opt_cd8 <- cd8_out
save('diff_opt_cd4', 'diff_opt_cd8', 'diff_dt', file=file.path(here::here('..','data','diff.Rdata')))
# ------
# make a downsampled version for faster plotting and analysis
n_events_per_well <- 2500
cd8_out <- load_diff_data(cd8_dir, cd8_marker_pos_threshold, max_sample=n_events_per_well)
cd4_out <- load_diff_data(cd4_dir, cd4_marker_pos_threshold, max_sample=n_events_per_well)
diff_dt <- rbind(cd8_out$fcs_melt_dt[, t_type := 'cd8'], cd4_out$fcs_melt_dt[, t_type := 'cd4'])
save('diff_opt_cd4', 'diff_opt_cd8', 'diff_dt', file=file.path(here::here('..','data','diff.sampled.Rdata')))
n_events_per_well <- 10000
cd4_marker_pos_threshold <- list(
cd62l_t=1300,
cd27_t=1800,
ccr7_t=1100,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd4_dir <- "flow/TCSL105 ALL FILES/Diff/processed"
#AWS Version:
cd4_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl105/diff"
experiment_dir <- cd4_dir
marker_pos_threshold <- cd4_marker_pos_threshold
max_sample <- 10000
diff_dir <- file.path(parent_folder, experiment_dir)
platemaps <- load_platemaps(diff_dir)
fcs_out <- load_fcs(diff_dir)
fcs_dt <- fcs_out$fcs_dt
channel_map <- fcs_out$channel_map
rm(fcs_out)
fcs_dt <- merge(
fcs_dt, platemaps,
on=intersect(names(platemaps), names(fcs_dt)), all=TRUE)
# flowJo transform
for (chan_name in c(names(channel_map),
'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')) {
fcs_dt[, c(paste0(chan_name,'_t')) := flowjo_biexp()(fcs_dt[[chan_name]])]
}
melt_cols <- c(names(channel_map), 'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')
transformed_vars <- paste0(melt_cols,'_t')
melt_cols <- c(melt_cols, transformed_vars)
# downsample per well if specified
fcs_dt <- fcs_dt[, .SD[sample(.N, min(c(.N, max_sample)))], by=c('well','plate','day')]
fcs_melt_dt <- melt(
fcs_dt,
measure.vars=melt_cols)
marker_thresh_dt <- data.table(
variable= paste0(names(marker_pos_threshold)),
threshold= unlist(marker_pos_threshold))
fcs_melt_dt
fcs_melt_dt[marker_thresh_dt, on='variable'][gt_thresh := value > threshold]
marker_thresh_dt
fcs_melt_dt[marker_thresh_dt, on='variable']
fcs_melt_dt <- fcs_melt_dt[marker_thresh_dt, on='variable'][, gt_thresh := value > threshold]
fcs_melt_dt[, threshold := NULL]
fcs_melt_dt
unique(fcs_melt_dt$variable)
require(data.table)
require(scales)
require(here)
require(flowCore)
require(flowWorkspace)
parent_folder = here::here('..','..')
load_platemaps <- function(diff_dir) {
# load platemap filenames
platemap_paths <- data.table(
filepath= normalizePath(file.path(diff_dir, list.files(
diff_dir,
pattern='.*platemap.csv$',
recursive=TRUE))))
#parse day from file name
platemap_paths[, day := gsub('.*D(\\d+).*', '\\1', filepath)]
# load and merge platemaps
platemaps <- platemap_paths[, fread(file=.BY[[1]]), by=filepath]
# put 0 back into well number (ugh)
platemaps[, well := gsub(' ', '',
gsub('([A-H])(\\d{1})$', '\\1 0\\2', well))]
platemaps[car == 'KRLG1', car := 'KLRG1'][]
return(platemaps)
}
load_fcs <- function(diff_dir, channel_map) {
diff_fcs_dir <- file.path(diff_dir)
# load fcs filenames
fcs_paths <- data.table(
filepath= normalizePath(file.path(diff_fcs_dir, list.files(
diff_fcs_dir,
pattern='.*fcs',
recursive=TRUE))))
# parse well name
fcs_paths[, well := gsub('.*_([A-H]\\d+).fcs','\\1', filepath)]
fcs_paths[, plate := gsub('.*(\\d+)_[A-H]\\d+.fcs','\\1', filepath)]
fcs_paths[, day := gsub('.*_(\\d+)_\\d+_[A-H]\\d+.fcs','\\1', filepath)]
fcs_dt <- fcs_paths[,
as.data.frame(flowCore::exprs(read.FCS(filepath))),
by=c('well','plate','day')]
# give each event an ID for tracking after melt
fcs_dt[, event_id := .I, by=c('well','plate','day')]
channel_map <- list(
cd="FJComp-450_50 Violet-A",
ccr7="FJComp-780_60 YG-A",
gfp="FJComp-515_20 Blue-A",
zombie="FJComp-586_15 Violet-A",
myc="FJComp-610_20 YG-A",
cd45ra= "FJComp-660_20 Red-A",
cd62l= "FJComp-800_30 Violet-A",
cd95="FJComp-710_50 Violet-A",
cd27="FJComp-780_60 Red-A",
cd45ro="FJComp-379_28 UV-A")
# replace column names
chan_names <- data.table(merge(
names(fcs_dt),
data.table(
marker=names(channel_map),
chan=unlist(channel_map)),
by.x='x', by.y='chan',
all=T))
# fill in original column names
chan_names[is.na(marker), marker := x]
# rename columns and melt
names(fcs_dt) <- chan_names[
names(fcs_dt), marker, on='x']
# merge unmelted with plate map
fcs_dt[, day := as.numeric(day)]
fcs_dt[, plate := as.numeric(plate)]
return(list(fcs_dt= fcs_dt, channel_map= channel_map))
}
load_diff_data <- function(experiment_dir, marker_pos_threshold, max_sample=Inf) {
diff_dir <- file.path(parent_folder, experiment_dir)
platemaps <- load_platemaps(diff_dir)
fcs_out <- load_fcs(diff_dir)
fcs_dt <- fcs_out$fcs_dt
channel_map <- fcs_out$channel_map
rm(fcs_out)
fcs_dt <- merge(
fcs_dt, platemaps,
on=intersect(names(platemaps), names(fcs_dt)), all=TRUE)
# flowJo transform
for (chan_name in c(names(channel_map),
'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')) {
fcs_dt[, c(paste0(chan_name,'_t')) := flowjo_biexp()(fcs_dt[[chan_name]])]
}
melt_cols <- c(names(channel_map), 'SSC-A','SSC-W','SSC-H','FSC-A','FSC-H','FSC-W')
transformed_vars <- paste0(melt_cols,'_t')
melt_cols <- c(melt_cols, transformed_vars)
# downsample per well if specified
fcs_dt <- fcs_dt[, .SD[sample(.N, min(c(.N, max_sample)))], by=c('well','plate','day')]
fcs_melt_dt <- melt(
fcs_dt,
measure.vars=melt_cols)
marker_thresh_dt <- data.table(
variable= paste0(names(marker_pos_threshold)),
threshold= unlist(marker_pos_threshold))
fcs_melt_dt <- fcs_melt_dt[marker_thresh_dt, on='variable'][, gt_thresh := value > threshold]
fcs_melt_dt[, threshold := NULL]
return(list(fcs_melt_dt= fcs_melt_dt, channel_map=channel_map, melt_cols=melt_cols))
}
# CD4 ======
n_events_per_well <- 10000
cd4_marker_pos_threshold <- list(
cd62l_t=1300,
cd27_t=1800,
ccr7_t=1100,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd4_dir <- "flow/TCSL105 ALL FILES/Diff/processed"
#AWS Version:
cd4_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl105/diff"
cd4_out <- load_diff_data(cd4_dir, cd4_marker_pos_threshold, max_sample=n_events_per_well)
# CD8 ======
cd8_marker_pos_threshold <- list(
cd62l_t=1750,
cd27_t=1800,
ccr7_t=1050,
cd45ro_t=800,
cd45ra_t=900,
cd95_t=2100,
cd_t=NA,
zombie_t=NA,
myc_t=NA,
FSC_t=NA,
SSC_t=NA)
#Box Version:
#cd8_dir <- "flow/2019.06.07 TCSL091 ALL FILES/Diff/processed"
#AWS Version:
cd8_dir <- "s3-roybal-tcsl/lenti_screen_compiled_data/data/fcs/tcsl091/diff"
cd8_out <- load_diff_data(cd8_dir, cd8_marker_pos_threshold, max_sample=n_events_per_well)
diff_dt <- rbind(cd8_out$fcs_melt_dt[, t_type := 'cd8'], cd4_out$fcs_melt_dt[, t_type := 'cd4'])
cd4_out$fcs_melt_dt <- NULL
cd8_out$fcs_melt_dt <- NULL
diff_opt_cd4 <- cd4_out
diff_opt_cd8 <- cd8_out
save('diff_opt_cd4', 'diff_opt_cd8', 'diff_dt', file=file.path(here::here('..','data','diff.Rdata')))
# ------
# make a downsampled version for faster plotting and analysis
n_events_per_well <- 2500
cd8_out <- load_diff_data(cd8_dir, cd8_marker_pos_threshold, max_sample=n_events_per_well)
cd4_out <- load_diff_data(cd4_dir, cd4_marker_pos_threshold, max_sample=n_events_per_well)
diff_dt <- rbind(cd8_out$fcs_melt_dt[, t_type := 'cd8'], cd4_out$fcs_melt_dt[, t_type := 'cd4'])
save('diff_opt_cd4', 'diff_opt_cd8', 'diff_dt', file=file.path(here::here('..','data','diff.sampled.Rdata')))
library(data.table)
library(ggplot2)
library(gtable)
library(RColorBrewer)
#to make a data table with my csv
signaling.dt <- fread('/home/ec2-user/s3-roybal-tcsl/lenti_screen_compiled_data/data/csv/tcsl148.csv')
signaling.dt <- fread('/home/ec2-user/roybal-tcsl/lenti_screen_compiled_data/data/csv/tcsl148.csv')
signaling.dt <- fread('/home/ec2-user/s3-roybal-tcsl/lenti_screen_compiled_data/data/csv/tcsl148.csv')
#to make a data table with my csv
signaling.dt <- fread('/home/ec2-user/s3-roybal-tcsl/lenti_screen_compiled_data/data/csv/tcsl148.csv')
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(grid)
library(gtable)
library(RColorBrewer)
#paste into terminal tab until Dan fixes this
#s3fs roybal-tcsl ~/s3-roybal-tcsl/ -o passwd_file=${HOME}/.passwd-s3fs
#to make a data table with my csv
signaling.dt <- fread('/home/ec2-user/s3-roybal-tcsl/lenti_screen_compiled_data/data/csv/tcsl148.csv')
# to plot a bar plot to show the differing percentages of Jurkats
ggplot(data=signaling.dt, aes(x=interaction(CAR, Hours), y=combo_mcherry_percent, fill=Line))+
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# to plot a bar plot to show the differing MFI of Jurkats
#ggplot(data=signaling.dt, aes(x=interaction(CAR, line), y=combo_mcherry_mfi, fill=line))+
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, hjust = 1))
#to make a data table with stimulation of the difference between + and -
posneg.signaling.dt <- signaling.dt[, list(
posneg.diff= combo_mcherry_percent[Stimulation=="+"] - combo_mcherry_percent[Stimulation=='-']),
by=c('CAR','Line','Hours')]
# to plot a bar plot to show the differing percentages of Jurkats + and -
ggplot(posneg.signaling.dt, aes(x=interaction(CAR, Hours, Line), y=posneg.diff, fill=Line))+
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#to make a data table with stimulation of the difference between + and none
posnone.signaling.dt <- signaling.dt[, list(
posnone.diff= combo_mcherry_percent[Stimulation=="+"] - combo_mcherry_percent[Stimulation=='none']),
by=c('CAR','Line','Hours')]
# to plot a bar plot to show the differing percentages of Jurkats + and none
ggplot(posnone.signaling.dt, aes(x=interaction(CAR, Hours, Line), y=posnone.diff, fill=Line))+
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#to make a data table with stimulation of the difference between - and none
negnone.signaling.dt <- signaling.dt[, list(
negnone.diff= combo_mcherry_percent[Stimulation=="-"] - combo_mcherry_percent[Stimulation=='none']),
by=c('CAR','Line','Hours')]
# to plot a bar plot to show the differing percentages of Jurkats - and none
ggplot(negnone.signaling.dt, aes(x=interaction(CAR, Hours, Line), y=negnone.diff, fill=Line))+
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#This area is to make a heatmap.
ggplot(posneg.signaling.dt) +
geom_tile(aes(y=CAR, x=as.factor(Hours), fill=posneg.diff)) +
scale_fill_distiller('Difference in\nActivation,\nCD19+ vs CD19-', palette='Blues', direction = 1) +
facet_grid(Line ~ Hours, scales='free') +
labs(x='Hours of Stimulation', title='TCSL148 Jurkat Signaling Lines') +
theme_minimal() +
theme(legend.title.align=0.5, plot.title = element_text(hjust = 0.5))
#ONE CELL LINE AT A TIME
ggplot(signaling.dt[(Line=='4047' & Hours > 1 & Stimulation == '+' ) | (Line=='4047' & Hours <1 & Stimulation == 'none')]) +
geom_tile(aes(y=CAR, x=as.factor(Hours), fill=combo_mcherry_percent)) +
scale_fill_distiller('Percent Activation CD19+', palette='Blues', direction = 1) +
facet_grid(Line ~ Hours, scales='free') +
labs(x='Hours of Stimulation', title='TCSL148 Signaling NFkB/4047 CD19+ Stim') +
theme_minimal() +
theme(legend.title.align=0.5, plot.title = element_text(hjust = 0.5))
#to make individual bar graphs
#pos only all lines all days
ggplot(signaling.dt[Stimulation == '+'], aes(x=interaction(CAR, Hours, Line), y=combo_mcherry_percent, fill=Line))+
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#pos only and 4045 only all days but D0
ggplot(signaling.dt[Stimulation == '+'& Line=='4045'], aes(x=interaction(CAR, Hours), y=combo_mcherry_percent, fill=Hours)) +
facet_grid(~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#pos only and 4047 only all days with D0
ggplot(signaling.dt[(Line=='4047' & Hours > 1 & Stimulation == '+' ) | (Line=='4047' & Hours <1 & Stimulation == 'none')], aes(x=interaction(CAR, Hours), y=combo_mcherry_percent, fill=Hours))+ facet_grid(~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal()+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
#pos only and 4047 only all days with D0 and fixed x axis and colors
ggplot(signaling.dt[(Line=='4047' & Hours > 1 & Stimulation == '+' ) | (Line=='4047' & Hours <1 & Stimulation == 'none')], aes(x=as.factor(Hours), y=combo_mcherry_percent, fill=factor(Hours))) + facet_grid(~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_brewer(palette="Blues")
#choosing a subset of colors from a palette
# n should be acual number of color squares
# the c() should have the colors in the set you want
# you can remove with c(-9), or do a range with c(3:7)
#then, use a manual color scale with the chosen colors
ggplot(signaling.dt[(Line=='4045' & Hours > 1 & Stimulation == '+' ) | (Line=='4045' & Hours <1 & Stimulation == 'none')], aes(x=as.factor(Hours), y=combo_mcherry_percent, fill=factor(Hours))) + facet_grid(~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = .5),
legend.title.align=0.5, plot.title = element_text(hjust =
0.5)) +
scale_fill_manual(values=brewer.pal(9, "Blues")[c(3,5,7,9)]) +
labs(x='Hours of Stimulation', y='Percent Reporter Activity',
title='TCSL148 Signaling (AP1/4045) K562 CD19+')
#in order to look at all of the stimulation types at once and to make all of the y axis scales the same at 100%
ggplot(signaling.dt[(Line=='4045' & Hours > 1) | (Line=='4045' & Hours <1 & Stimulation == 'none')], aes(x=as.factor(Hours), y=combo_mcherry_percent, fill=factor(Hours))) + facet_grid(Stimulation ~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = .5), legend.title.align=0.5, plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values=brewer.pal(9, "Blues")[c(3,5,7,9)]) + labs(x='Hours of Stimulation', y='Percent Reporter Activity', title='TCSL148 Signaling (AP1/4045)') + ylim(0, 100)
#to make 0 hours no stimulation bar copy onto all of the stimulation types (even though it did not get + or - stim)
map_day_0 <- function(df) {
return(rbind(
df,
df[Stimulation=='none' & Hours == 0][, Stimulation := '+'],
df[Stimulation=='none' & Hours == 0][, Stimulation := '-']
))}
plot.signaling.dt <- map_day_0(signaling.dt)
ggplot(plot.signaling.dt[(Line=='4045')], aes(x=as.factor(Hours), y=combo_mcherry_percent, fill=factor(Hours))) + facet_grid(Stimulation ~CAR, scales='free') +
geom_bar(stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = .5), legend.title.align=0.5, plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values=brewer.pal(9, "Blues")[c(3,5,7,9)]) + labs(x='Hours of Stimulation', y='Percent Reporter Activity', title='TCSL148 Signaling (AP1/4045)') + ylim(0, 100)
